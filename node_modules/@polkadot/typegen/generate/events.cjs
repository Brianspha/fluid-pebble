"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateDefaultEvents = generateDefaultEvents;

var _handlebars = _interopRequireDefault(require("handlebars"));

var _definitions = _interopRequireDefault(require("@polkadot/types/augment/lookup/definitions"));

var defaultDefs = _interopRequireWildcard(require("@polkadot/types/interfaces/definitions"));

var _util = require("@polkadot/util");

var _index = require("../util/index.cjs");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Copyright 2017-2021 @polkadot/typegen authors & contributors
// SPDX-License-Identifier: Apache-2.0
const generateForMetaTemplate = _handlebars.default.compile((0, _index.readTemplate)('events'));
/** @internal */


function generateForMeta(meta, dest, extraTypes, isStrict, customLookupDefinitions) {
  (0, _index.writeFile)(dest, () => {
    const allTypes = {
      '@polkadot/types/augment': {
        lookup: { ..._definitions.default,
          ...customLookupDefinitions
        }
      },
      '@polkadot/types/interfaces': defaultDefs,
      ...extraTypes
    };
    const imports = (0, _index.createImports)(allTypes);
    const allDefs = Object.entries(allTypes).reduce((defs, _ref) => {
      let [path, obj] = _ref;
      return Object.entries(obj).reduce((defs, _ref2) => {
        let [key, value] = _ref2;
        return { ...defs,
          [`${path}/${key}`]: value
        };
      }, defs);
    }, {});
    const {
      lookup,
      pallets,
      registry
    } = meta.asLatest;
    const modules = pallets.filter(_ref3 => {
      let {
        events
      } = _ref3;
      return events.isSome;
    }).map(_ref4 => {
      let {
        events,
        name
      } = _ref4;
      return {
        items: lookup.getSiType(events.unwrap().type).def.asVariant.variants.map(_ref5 => {
          let {
            docs,
            fields,
            name
          } = _ref5;
          const args = fields.map(_ref6 => {
            let {
              type
            } = _ref6;
            return lookup.getTypeDef(type);
          }).map(typeDef => typeDef.lookupName || (0, _index.formatType)(registry, allDefs, typeDef, imports));
          (0, _index.setImports)(allDefs, imports, args);
          return {
            docs,
            name: name.toString(),
            type: args.join(', ')
          };
        }).sort(_index.compareName),
        name: (0, _util.stringCamelCase)(name)
      };
    }).sort(_index.compareName);
    return generateForMetaTemplate({
      headerType: 'chain',
      imports,
      isStrict,
      modules,
      types: [...Object.keys(imports.localTypes).sort().map(packagePath => ({
        file: packagePath.replace('@polkadot/types/augment', '@polkadot/types'),
        types: Object.keys(imports.localTypes[packagePath])
      })), {
        file: '@polkadot/api/types',
        types: ['ApiTypes', 'AugmentedEvent', 'ModuleEvents']
      }]
    });
  });
} // Call `generateForMeta()` with current static metadata

/** @internal */


function generateDefaultEvents() {
  let dest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'packages/api/src/augment/events.ts';
  let data = arguments.length > 1 ? arguments[1] : undefined;
  let extraTypes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  let isStrict = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  let customLookupDefinitions = arguments.length > 4 ? arguments[4] : undefined;
  const {
    metadata
  } = (0, _index.initMeta)(data, extraTypes);
  return generateForMeta(metadata, dest, extraTypes, isStrict, customLookupDefinitions);
}